{
  "hash": "072db3711384bedf70a9facf86a0ffa5",
  "result": {
    "markdown": "# Network Estimation\n\n\n::: {.cell hash='02_networkestimation_cache/html/02-setup_8902654764a7278f2af86ab53d65b982'}\n\n```{.r .cell-code}\nsource(\"prerender.R\")\n```\n:::\n\n\nWe chose to model a Gaussian graphical model (GGM) using the `ggmModSelect` model search algorithm (Foygel & Drton, 2010; Epskamp et al., 2012). The algorithm uses a starting point selected with graphical least absolute shrinkage and selection operator (GLASSO) regression, after which it searches the model space by minimising the Bayesian Information Criterion (BIC; see Blanken, Isvoranu & Epskamp, 2021: pp. 118-120).\n\nThe algorithm has been shown to present high sensitivity (true positive detection rate) and specificity (true negative detection rate), with the main drawback being a slow calculation time (Blanken, Isvoranu & Epskamp, 2021: pp. 118-120). However, simulation studies have shown that, at lower sample sizes (e.g., N = 300), sensitivity suffers a drop and the graphical model becomes more difficult to interpret (Blanken, Isvoranu & Epskamp, 2021: p. 125; Isvoranu & Epskamp, 2021). Even though regularization methods may be more preferable at lower sample sizes, we opt to use the same modelling algorithm for both the main network model and the later comparative models, to ensure the validity of comparing models across analyses.\n\nBecause our risk perception variables are ordered categorical data, we implement the `ggmModSelect` algorithm using polychoric correlations - a method that attempts to estimate an underlying continuity beneath Likert-type measurements (Olsson, 1979; Epskamp & Fried, 2018). This method may be more unstable for low sample sizes as well as lead to conservative estimates (Blanken, Isvoranu & Epskamp, 2021: pp. 126-127).\n\nWe handled missing data using pair-wise removal, as a more appropriate missing data procedure (e.g., full information maximum likelihood) is not implemented for ordinal data.\n\nThe plotted network is shown in @fig-network-graph.\n\n\n::: {.cell hash='02_networkestimation_cache/html/network-bootstrap_ea2cea6c993398065efe897cfe0791cc'}\n\n```{.r .cell-code}\nnetwork_data <- data %>% dplyr::select(Weather:Polarization)\nnetwork_labels <- names(network_data)\n\n# Bootstrapped using 8 logical processor cores. Change nCores for an appropriate maximum value for your computer to speed up bootstrapping accordingly.\n# The bootstrap takes approximately 14 minutes on an Intel Core i5-10310U processor using all eight cores.\n\nnetwork <- bootnet::bootnet(\n  network_data,\n  default = \"ggmModSelect\",\n  type = \"case\",\n  statistics = c(\"edge\", \"strength\", \"closeness\", \"betweenness\"),\n  nCores = 8,\n  corMethod = \"cor_auto\",\n  missing = \"pairwise\",\n  start = \"glasso\",\n  nonPositiveDefinite = \"continue\"\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNote: bootnet will store only the following statistics:  edge, strength, closeness, betweenness\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nEstimating sample network...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nEstimating Network. Using package::function:\n  - qgraph::ggmModSelect for model selection\n    - using glasso::glasso\n  - qgraph::cor_auto for correlation computation\n    - using lavaan::lavCor\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nVariables detected as ordinal: Weather; Traffic; Fire; Nuclear; Work; Leisure; War; Environmental; Pandemic; Illness; Violence; Operational; Hybrid; Polarization\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nRunning glasso to obtain starting model...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting all edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting all edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting all edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nBootstrapping...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nComputing statistics...\n```\n:::\n:::\n\n::: {.cell hash='02_networkestimation_cache/html/fig-network-graph_65ab950ecce96275b92a85f5ca7eb2d7'}\n\n```{.r .cell-code}\nplot(\n  network$sample,\n  layout = \"circle\",\n  edge.labels = TRUE,\n  theme = \"colorblind\"\n)\n```\n\n::: {.cell-output-display}\n![Graph of GGM modelling risk perception variables](02_networkestimation_files/figure-html/fig-network-graph-1.png){#fig-network-graph width=672}\n:::\n:::\n\n\nWe retrieved descriptive statistics for each node's vertices, as well as node-wise centrality statistics. These are shown in @tbl-network-stats below.\n\n\n::: {#tbl-network-stats .cell tbl-cap='Descriptive statistics of network nodes' hash='02_networkestimation_cache/html/tbl-network-stats_e36e6262af7cc5f73805e883d355e5e3'}\n\n```{.r .cell-code}\nsummary <- tibble(\n  Node = network$sample$labels,\n  Max = summarise(as_tibble(network$sample$graph), across(everything(), max)) %>% unlist(., use.names=FALSE),\n  Min = summarise(as_tibble(network$sample$graph), across(everything(), min)) %>% unlist(., use.names=FALSE),\n  Mean = summarise(as_tibble(network$sample$graph), across(everything(), mean)) %>% unlist(., use.names=FALSE),\n  SD = summarise(as_tibble(network$sample$graph), across(everything(), sd)) %>% unlist(., use.names=FALSE)\n)\n\ncent <- qgraph::centralityTable(network$sample$graph, standardized = FALSE) %>%\n  reshape2::dcast(\n    node ~ measure,\n    value.var = \"value\"\n  ) %>%\n  rename(\n    Node = \"node\"\n  )\n\nsummary <- left_join(summary, cent, by = \"Node\")\n\nknitr::kable(\n  summary,\n  digits = 2,\n  col.names = c(\"Node\", \"Maximum\", \"Minimum\", \"Mean\", \"SD\", \"Betweenness\", \"Closeness\", \"Strength\", \"Expected Influence\")\n  )\n```\n\n::: {.cell-output-display}\n|Node          | Maximum| Minimum| Mean|   SD| Betweenness| Closeness| Strength| Expected Influence|\n|:-------------|-------:|-------:|----:|----:|-----------:|---------:|--------:|------------------:|\n|Weather       |    0.16|   -0.07| 0.04| 0.06|           0|      0.01|     0.72|               0.59|\n|Traffic       |    0.47|   -0.06| 0.07| 0.13|           3|      0.01|     1.24|               1.00|\n|Fire          |    0.47|   -0.08| 0.08| 0.13|           6|      0.01|     1.32|               1.16|\n|Nuclear       |    0.28|   -0.08| 0.06| 0.12|           9|      0.01|     1.16|               0.87|\n|Work          |    0.29|   -0.18| 0.04| 0.12|           4|      0.01|     1.10|               0.59|\n|Leisure       |    0.29|   -0.05| 0.07| 0.11|           2|      0.01|     1.01|               0.91|\n|War           |    0.28|   -0.06| 0.06| 0.10|           0|      0.01|     1.03|               0.80|\n|Environmental |    0.27|    0.00| 0.08| 0.10|          12|      0.01|     1.09|               1.09|\n|Pandemic      |    0.27|   -0.07| 0.07| 0.11|           8|      0.01|     1.10|               0.97|\n|Illness       |    0.27|   -0.18| 0.07| 0.11|          12|      0.01|     1.29|               0.92|\n|Violence      |    0.21|   -0.07| 0.07| 0.08|           5|      0.01|     1.06|               0.92|\n|Operational   |    0.28|    0.00| 0.07| 0.09|           5|      0.01|     1.01|               1.01|\n|Hybrid        |    0.43|   -0.08| 0.06| 0.14|           6|      0.01|     1.35|               0.89|\n|Polarization  |    0.43|   -0.05| 0.06| 0.12|           1|      0.01|     0.93|               0.83|\n:::\n:::\n\n\nThe output of the `bootnet::print` function is presented below.\n\n\n::: {.cell hash='02_networkestimation_cache/html/network-summary_68f3d98e1f690b91034572763c8dcc19'}\n\n```{.r .cell-code}\nprint(network)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n=== bootnet Results ===\nNumber of nodes: 14 \nNumber of non-zero edges in sample: 57 / 91 \nMean weight of sample: 0.06900706 \nNumber of bootstrapped networks: 1000 \nResults of original sample stored in network$sample \nTable of all statistics from original sample stored in network$sampleTable \nResults of bootstraps stored in network$boots \nTable of all statistics from bootstraps stored in network$bootTable \n \nUse plot(network$sample) to plot estimated network of original sample \nUse summary(network) to inspect summarized statistics (see ?summary.bootnet for details) \nUse plot(network) to plot summarized statistics (see ?plot.bootnet for details) \n\nRelevant references:\n\n \tFoygel, R., & Drton, M. (2010). Extended Bayesian information criteria for Gaussian graphical models.\n\thttp://psychosystems.org/qgraph_1.5\n\tEpskamp, S., Borsboom, D., & Fried, E. I. (2016). Estimating psychological networks and their accuracy: a tutorial paper. arXiv preprint, arXiv:1604.08462.\n```\n:::\n\n```{.r .cell-code}\nprint(paste0(\n  \"Number of positive ties: \",\n  sum(network$sample$graph[lower.tri(network$sample$graph)] > 0)\n))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Number of positive ties: 48\"\n```\n:::\n\n```{.r .cell-code}\nprint(paste0(\n  \"Number of negative ties: \",\n  sum(network$sample$graph[lower.tri(network$sample$graph)] < 0)\n))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Number of negative ties: 9\"\n```\n:::\n\n```{.r .cell-code}\nprint(paste0(\n  \"Number of absolute ties between 0 and 0.2 (exclusive): \",\n  sum(network$sample$graph[lower.tri(network$sample$graph)] > 0 & network$sample$graph[lower.tri(network$sample$graph)] < 0.2)\n))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Number of absolute ties between 0 and 0.2 (exclusive): 36\"\n```\n:::\n:::\n\n\nThe flow diagram for the Hybrid node is generated below.\n\n\n::: {.cell hash='02_networkestimation_cache/html/fig-hybrid-flow-diagram_818406933d255b21589f50e122f7df10'}\n\n```{.r .cell-code}\nplot(qgraph::flow(network$sample$graph, from = 13, theme = \"colorblind\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in qgraph::flow(network$sample$graph, from = 13, theme = \"colorblind\"):\nInput is not a qgraph object, runnin gqgraph\n```\n:::\n\n::: {.cell-output-display}\n![Flow diagram of the Hybrid node.](02_networkestimation_files/figure-html/fig-hybrid-flow-diagram-1.png){#fig-hybrid-flow-diagram width=672}\n:::\n:::\n\n\n## Network Characteristics\n\nFIGURE X below shows the strength, closeness, and betweenness centrality measures of the estimated network nodes.\n\n\n::: {.cell hash='02_networkestimation_cache/html/fig-centrality_00f6939f3a9116df6dc334f0e632fa87'}\n\n```{.r .cell-code}\nqgraph::centralityPlot(network$sample$graph, scale = \"z-scores\", include = c(\"Strength\", \"Closeness\", \"Betweenness\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNote: z-scores are shown on x-axis rather than raw centrality indices.\n```\n:::\n\n::: {.cell-output-display}\n![Centrality measures of estimated network.](02_networkestimation_files/figure-html/fig-centrality-1.png){#fig-centrality width=672}\n:::\n:::\n\n\n## Robustness Checks\n\nWe then attempted a robustness check by retrieving Correlation Stability (CS) coefficients for each of the four centrality measures. The coefficient estimates the number of cases that could be dropped from the sample to retain a correlation between the case-dropped centrality measures and the original in 95 per cent of cases (REF TO BOOTNET). It is recommended that the CS coefficient stay over 0.25, and preferably over 0.5, for reliable centrality measures.\n\nThe results are shown visually in @fig-cs-stability below, with a dashed vertical line indicating a correlation of 0.7.\n\n\n::: {.cell hash='02_networkestimation_cache/html/fig-cs-stability_c2a65868683e56095b63f924c41d2411'}\n\n```{.r .cell-code}\nplot(network, statistics = \"all\") +\n  geom_hline(yintercept = 0.7, color = \"grey\", linetype = \"dashed\")\n```\n\n::: {.cell-output-display}\n![](02_networkestimation_files/figure-html/fig-cs-stability-1.png){#fig-cs-stability width=672}\n:::\n:::\n\n\nPrecise values are shown in the R output below.\n\n\n::: {.cell hash='02_networkestimation_cache/html/cs-stability-text-output_288d06af11a8b46d1e5b2e988e70a534'}\n\n```{.r .cell-code}\nbootnet::corStability(network, cor = 0.7, statistics = \"all\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n=== Correlation Stability Analysis === \n\nSampling levels tested:\n   nPerson Drop%   n\n1      764  75.0 115\n2     1001  67.2  88\n3     1239  59.4 113\n4     1477  51.7  90\n5     1714  43.9  84\n6     1952  36.1 101\n7     2189  28.3 104\n8     2427  20.6 116\n9     2665  12.8  93\n10    2902   5.0  96\n\nMaximum drop proportions to retain correlation of 0.7 in at least 95% of the samples:\n\nbetweenness: 0.206 \n  - For more accuracy, run bootnet(..., caseMin = 0.128, caseMax = 0.283) \n\ncloseness: 0.517 \n  - For more accuracy, run bootnet(..., caseMin = 0.439, caseMax = 0.594) \n\nedge: 0.75 (CS-coefficient is highest level tested)\n  - For more accuracy, run bootnet(..., caseMin = 0.672, caseMax = 1) \n\nstrength: 0.361 \n  - For more accuracy, run bootnet(..., caseMin = 0.283, caseMax = 0.439) \n\nAccuracy can also be increased by increasing both 'nBoots' and 'caseN'.\n```\n:::\n:::\n\n\nThe analysis shows that betweenness is too unstable to analyse, with only a 20 per cent case-drop causing the correlation with the original betweenness measure to drop below 0.7. Closeness and strength both hover around the mark of acceptable reliability, with edges being stable for up to 75 per cent case-dropping.\n\nThis implies that the edges themselves are highly stable for interpretation, and ought not be affected by outliers or singular cases. Closeness and strength statistics may reliably be interpreted, although care should be taken with small differences. Betweenness, however, is unfortunately too unreliable to adequately interpret.\n\n## Network Comparisons\n\nIn the manuscript, we analyse whether the network structure differs significantly between respondents who, in the past 12 months, had been in contact with emergency services personnel with regards to a hazard experience, and respondents who had not.\n\nWe started by estimating two models on the two groups separately, using the same algorithm and correlation methods as for the full sample model.\n\n\n::: {.cell hash='02_networkestimation_cache/html/subgroup-networks_da97cfdf79d137272557e7c345a1ea5f'}\n\n```{.r .cell-code}\nexp.0.network <- data %>%\n  dplyr::filter(Experience.Dichotomy == 0) %>%\n  dplyr::select(Weather:Polarization) %>%\n  bootnet::estimateNetwork(\n    .,\n    default = \"ggmModSelect\",\n    corMethod = \"cor_auto\",\n    missing = \"pairwise\",\n    nonPositiveDefinite = \"continue\"\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nEstimating Network. Using package::function:\n  - qgraph::ggmModSelect for model selection\n    - using glasso::glasso\n  - qgraph::cor_auto for correlation computation\n    - using lavaan::lavCor\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nVariables detected as ordinal: Weather; Traffic; Fire; Nuclear; Work; Leisure; War; Environmental; Pandemic; Illness; Violence; Operational; Hybrid; Polarization\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nRunning glasso to obtain starting model...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting all edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting all edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting all edges...\n```\n:::\n\n```{.r .cell-code}\nexp.1.network <- data %>%\n  dplyr::filter(Experience.Dichotomy == 1) %>%\n  dplyr::select(Weather:Polarization) %>%\n  bootnet::estimateNetwork(\n    .,\n    default = \"ggmModSelect\",\n    corMethod = \"cor_auto\",\n    missing = \"pairwise\",\n    nonPositiveDefinite = \"continue\"\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nEstimating Network. Using package::function:\n  - qgraph::ggmModSelect for model selection\n    - using glasso::glasso\n  - qgraph::cor_auto for correlation computation\n    - using lavaan::lavCor\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nVariables detected as ordinal: Weather; Traffic; Fire; Nuclear; Work; Leisure; War; Environmental; Pandemic; Illness; Violence; Operational; Hybrid; Polarization\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nRunning glasso to obtain starting model...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting all edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting all edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting all edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting all edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting all edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChanged one edge...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting subset of edges...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTesting all edges...\n```\n:::\n:::\n\n::: {#fig-subgroup-networks .cell layout-ncol=\"2\" hash='02_networkestimation_cache/html/fig-subgroup-networks_cbb849aa7e971a1206d015da309089da'}\n\n```{.r .cell-code}\nplot(exp.0.network, layout = \"circle\", theme = \"colorblind\", edge.labels = TRUE)\nplot(exp.1.network, layout = \"circle\", theme = \"colorblind\", edge.labels = TRUE)\n```\n\n::: {.cell-output-display}\n![No experience (N = ...)](02_networkestimation_files/figure-html/fig-subgroup-networks-1.png){#fig-subgroup-networks-1 width=672}\n:::\n\n::: {.cell-output-display}\n![Experience (N = ...)](02_networkestimation_files/figure-html/fig-subgroup-networks-2.png){#fig-subgroup-networks-2 width=672}\n:::\n\nNetwork models of risk perception, grouped by whether respondents had been in contact with emergency services personnel in a hazard-related event in the past twelve months (titled \"experience\").\n:::\n\n\nWe then conducted the network comparison test from the `NetworkComparisonTest` package for the two subgroup networks.\n\n\n::: {.cell hash='02_networkestimation_cache/html/nct-results_ebdd133ed01a382061e90681a327d966'}\n\n```{.r .cell-code}\n# The test is computationally intensive. On an Intel Core i5-10310U processor, the test took around 1.5 hours to run.\n# NB: GitHUb user pinusm has developed a fork of NCT that enables multi-core processing (github.com/pinusm/NetworkComparisonTest, commit a56712e). This fork does not seem to differ substantially from the current master version (github.com/cvborkulo/NetworkComparisonTest, commit f05b102), so it could be used to speed up the current analysis markedly.\n\nNetworkComparisonTest::NCT(\n  exp.0.network,\n  exp.1.network,\n  abs = TRUE,  # We test absolute values of edge connections.\n  it = 1000,\n  test.edges = TRUE,\n  edges = list(\n    c(\"Traffic\", \"Fire\"),\n    c(\"Hybrid\", \"Polarization\"),\n    c(\"Nuclear\", \"Pandemic\")\n    ),\n  progressbar = FALSE\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNote: estimateNetwork object used - estimation method has possibly not been validated.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n NETWORK INVARIANCE TEST \n Test statistic M: \n 0.2350788 \n p-value 0.1618382 \n\n GLOBAL STRENGTH INVARIANCE TEST \n Global strength per group:  8.257952 6.782549 \n Test statistic S:  1.475403 \n p-value 0.008991009\n\n EDGE INVARIANCE TEST \n     Var1         Var2           p-value Test statistic E\n1 Traffic         Fire 0.026973026973027       0.13586710\n2  Hybrid Polarization 0.241758241758242       0.06824976\n3 Nuclear     Pandemic 0.104895104895105       0.12572938\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}